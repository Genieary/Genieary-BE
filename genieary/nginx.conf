user  nginx;
worker_processes auto;

events { }

http {
    # Docker DNS resolver 추가
    resolver 127.0.0.11 valid=10s ipv6=off;

    # 블루그린 배포 backend 설정
    upstream backend {
        server blue:8080;
        # server green:8080;
    }

    # http → https 리다이렉트
    server {
        listen 80;
        server_name genieary.site www.genieary.site;
        return 301 https://$host$request_uri;
    }

    # https 서버 설정
    server {
        listen 443 ssl;
        http2 on;
        server_name genieary.site www.genieary.site;

        # 인증서 경로
        ssl_certificate     /etc/letsencrypt/live/genieary.site/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/genieary.site/privkey.pem;

        # 보안 옵션
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # WebSocket 엔드포인트 (SockJS)
        location /ws/ {
            proxy_pass http://backend;

            # HTTP/1.1 필수
            proxy_http_version 1.1;

            # WebSocket Upgrade 헤더
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # 기본 헤더
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket 타임아웃 설정 (장시간 연결)
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;

            # 캐시 비활성화
            proxy_buffering off;
            proxy_cache_bypass $http_upgrade;
        }

        location / {
            proxy_pass http://backend;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
